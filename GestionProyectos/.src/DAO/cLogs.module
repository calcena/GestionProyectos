' Gambas module file

Private conn As Connection
Private bResultado As Boolean
Private iContador As String
Private rstResultado As Result

Public Function InsCriticLog(iUsuario As Integer, sFecha As String, sHora As String, sPantalla As String, sMensaje As String) As Boolean
  ' Declaramos la variable de salida como FALSE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  
  bResultado = False
  
  conn = gConexion.ConectarDB()
  
  conn.Exec("INSERT INTO LOGS (ID_USUARIO,FECHA,HORA,PANTALLA,MENSAJE,ESTADO) VALUES (" & iUsuario & ",'" & sFecha & "','" & sHora & "','" & sPantalla & "','" & sMensaje & "','4')")
  ' Filas afectadas por nuestro insert
  rstResultado = conn.Exec("SELECT row_count() AS AFFECTED_ROWS")
  ' Evaluamos el resultado de la insercion
  If rstResultado.Count = 1 Then
    bResultado = True
  Endif
  
  Return bResultado
  
End

Public Function InsWarnLog(iUsuario As Integer, sFecha As String, sHora As String, sPantalla As String, sMensaje As String) As Boolean
  ' Declaramos la variable de salida como FALSE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  
  bResultado = False
  
  conn = gConexion.ConectarDB()
  
  conn.Exec("INSERT INTO LOGS (ID_USUARIO,FECHA,HORA,PANTALLA,MENSAJE,ESTADO) VALUES (" & iUsuario & ",'" & sFecha & "','" & sHora & "','" & sPantalla & "','" & sMensaje & "','3')")
  ' Filas afectadas por nuestro insert
  rstResultado = conn.Exec("SELECT row_count() AS AFFECTED_ROWS")
  ' Evaluamos el resultado de la insercion
  If rstResultado.Count = 1 Then
    bResultado = True
  Endif
  
  Return bResultado
  
End

Public Function InsKoLog(iUsuario As Integer, sFecha As String, sHora As String, sPantalla As String, sMensaje As String) As Boolean
  ' Declaramos la variable de salida como FALSE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  
  bResultado = False
  
  conn = gConexion.ConectarDB()
  
  conn.Exec("INSERT INTO LOGS (ID_USUARIO,FECHA,HORA,PANTALLA,MENSAJE,ESTADO) VALUES (" & iUsuario & ",'" & sFecha & "','" & sHora & "','" & sPantalla & "','" & sMensaje & "','2')")
  ' Filas afectadas por nuestro insert
  rstResultado = conn.Exec("SELECT row_count() AS AFFECTED_ROWS")
  ' Evaluamos el resultado de la insercion
  If rstResultado.Count = 1 Then
    bResultado = True
  Endif
  
  Return bResultado
  
End

Public Function InsOkLog(iUsuario As Integer, sFecha As String, sHora As String, sPantalla As String, sMensaje As String) As Boolean
  ' Declaramos la variable de salida como FALSE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  
  bResultado = False
  
  conn = gConexion.ConectarDB()
  
  conn.Exec("INSERT INTO LOGS (ID_USUARIO,FECHA,HORA,PANTALLA,MENSAJE,ESTADO) VALUES (" & iUsuario & ",'" & sFecha & "','" & sHora & "','" & sPantalla & "','" & sMensaje & "','1')")
  ' Filas afectadas por nuestro insert
  rstResultado = conn.Exec("SELECT row_count() AS AFFECTED_ROWS")
  ' Evaluamos el resultado de la insercion
  If rstResultado.Count = 1 Then
    bResultado = True
  Endif
  
  Return bResultado
  
End

Public Function LogsFilter(sFecha As String, sMensaje As String, sEstado As String) As Result
  
  Dim sSql As String = Null
  
  sSql = "SELECT "
  sSql &= "ID_LOG, "
  sSql &= "FECHA, "
  sSql &= "HORA, "
  sSql &= "PANTALLA, "
  sSql &= "MENSAJE, "
  sSql &= "ESTADO "
  sSql &= "FROM LOGS "
  sSql &= "WHERE FECHA LIKE '%" & sFecha & "%' "
  sSql &= "AND (PANTALLA Like '%" & sMensaje & "%' "
  sSql &= "OR MENSAJE LIKE '%" & sMensaje & "%') "
  sSql &= "AND ESTADO LIKE '%" & sEstado & "%'"
  
  conn = gConexion.ConectarDB()
  rstResultado = conn.Exec(sSql)
  
  Return rstResultado
  
End

Public Function getLastSession(iIdUsuario As Integer) As String[]
  
  Dim sQuery As String = Null
  Dim resultado As New String[]
  
  sQuery = "SELECT ESTADO,FECHA,HORA,PANTALLA,MENSAJE "
  sQuery &= "FROM LOGS "
  sQuery &= "WHERE ID_USUARIO=" & iIdUsuario & " "
  sQuery &= "ORDER BY ID_LOG DESC "
  sQuery &= "LIMIT 1"
  conn = gConexion.ConectarDB()
  rstResultado = conn.Exec(sQuery)
  
  rstResultado.MoveFirst
  
  Do While rstResultado.Available
    resultado.Add(rstResultado!ESTADO)
    resultado.Add("Última sesión: " & rstResultado!FECHA & " " & rstResultado!HORA & "\r\n- " & rstResultado!PANTALLA & "\r\n- " & rstResultado!MENSAJE)
    rstResultado.MoveNext
  Loop
  
  Return resultado
  
End

Public Function GetLogs(ByRef objGridView As GridView, rstResultado As Result) As GridView
  
  Dim i As Integer = 0
  Dim n As Integer = 0  
  
  objGridView.Columns.Count = rstResultado.Fields.Count 
  
  objGridView.Columns[0].width = 0
  objGridView.Columns[0].Resizable = False
  'objGridView.Columns[1].width = 100
  objGridView.Columns[1].Resizable = False
  objGridView.Columns[1].Expand = True
  'objGridView.Columns[2].width = 100
  objGridView.Columns[2].Resizable = False
  objGridView.Columns[2].Expand = True
  'objGridView.Columns[3].width = 100
  objGridView.Columns[3].Resizable = False
  objGridView.Columns[3].Expand = True
  'objGridView.Columns[4].width = 100
  objGridView.Columns[4].Resizable = False
  objGridView.Columns[4].Expand = True
  'objGridView.Columns[5].width = 100
  objGridView.Columns[5].Expand = True
  objGridView.Columns[5].Resizable = False 
  ':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  
  objGridView.Rows.Count = 0
  
  rstResultado.MoveFirst
  
  Do While rstResultado.Available
    objGridView.Rows.count = rstResultado.Count
    
    objGridView[i, 0].Text = rstResultado!ID_LOG
    objGridView[i, 1].Text = rstResultado!FECHA
    objGridView[i, 2].Text = rstResultado!HORA
    objGridView[i, 3].Text = rstResultado!PANTALLA
    objGridView[i, 4].Text = rstResultado!MENSAJE
    
    Select rstResultado!ESTADO
      Case "1"
        objGridView[i, 5].Picture = gConst.picActivo 
      Case "2"
        objGridView[i, 5].Picture = gConst.picWarn 
      Case "3"
        objGridView[i, 5].Picture = gConst.picWarn 
      Case "4"
        objGridView[i, 5].Picture = gConst.picCritical
    End Select
    
    i += 1
    rstResultado.MoveNext
  Loop
  
  Return objGridView
  
End