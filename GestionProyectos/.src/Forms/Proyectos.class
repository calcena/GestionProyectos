' Gambas class file

Private sAccion As String = Null
Private iRespuesta As Integer
Private sFiltroCli As String = "%"
Private sFiltroPro As String = "%"
Private sBajaCli As String = "%"
Private rstResultado As Result = Null
Private sIdCliente As String = "%"
Private sEstadoBaja As String = "-"
Private sEstadoCerrado As String = "-"

Public Sub Form_Open()

  Me.Title = "Proyectos"
  'Inicializamos el valor a Activos
  swbEstado.value = "T"
  sBajaCli = "-"
  'Cargamos los datos de los clientes Activos
  ListViewClientes()
  '
  CargarEstadosProyectos()

  '
  CargarGrid()


End

Public Sub lblDescripcion_MouseDown()

End

Public Sub btnAdd_Click()

  ' Informamos la variable global como adición

  sAccion = "add"

  btnAceptar.Visible = True
  btnCancelar.Visible = True

  txtProyecto.Text = gUtils.GetCodigo("PRO")
  ' Creamos un nuevo registro
  cProyectos.AddProyecto(txtProyecto.Text)

End

Public Sub btnAceptar_Click()

  Select Case sAccion
    Case "add"

      If Len(Trim(txtDescripcion.text)) = 0 Then
        txtDescripcion.Background = Color.Red
        ' Aviso por pantalla al usuario
        Message.Warning("Debe cumplimentar los datos marcados en rojo")
        Return
      Else
        txtDescripcion.Background = Color.white
      End If

      If Len(Trim(txtHorasPrevistas.text)) = 0 Then
        txtHorasPrevistas.Background = Color.Red
        ' Aviso por pantalla al usuario
        Message.Warning("Debe cumplimentar los datos marcados en rojo")
        Return
      Else
        txtHorasPrevistas.Background = Color.white
      End If

      cProyectos.EditProyecto(txtProyecto.Text, txtDescripcion.Text, txtHorasPrevistas.Text)
      cLogs.InsOkLog(gEstructuras.getIdUsuario(), gUtils.FechaConFormato(Now), gUtils.HoraConFormato(Now), "Proyectos", "Proyecto: " & txtProyecto.text & " añadido al sistema.")
    Case "edit"
      If Len(Trim(txtDescripcion.text)) = 0 Then
        txtDescripcion.Background = Color.Red
        ' Aviso por pantalla al usuario
        Message.Warning("Debe cumplimentar los datos marcados en rojo")
        Return
      Else
        txtDescripcion.Background = Color.white
      End If

      If Len(Trim(txtHorasPrevistas.text)) = 0 Then
        txtHorasPrevistas.Background = Color.Red
        ' Aviso por pantalla al usuario
        Message.Warning("Debe cumplimentar los datos marcados en rojo")
        Return
      Else
        txtHorasPrevistas.Background = Color.white
      End If

      If ContieneDuplicado() Then
        Return
      End If


      cUsuarios.EditProyecto(txtProyecto.Text, txtDescripcion.Text, txtHorasPrevistas.Text)
      cLogs.InsOkLog(gEstructuras.getIdUsuario(), gUtils.FechaConFormato(Now), gUtils.HoraConFormato(Now), "Proyectos", "Proyecto: " & txtProyecto.text & " modificado en el sistema.")
    Case "del"
      ' Si=1 | No= 2
      iRespuesta = Message.Question("¿Quiere eliminar el registro?", "Sí", "No")

      If iRespuesta = 1 Then
        'Afirmativo
        'Realizamos la Baja lógica del registro según el identificador
        cProyectos.DelProyecto(gEstructuras.getIdSeleccion())
        cLogs.InsOkLog(gEstructuras.getIdUsuario, gUtils.FechaConFormato(Now), gUtils.HoraConFormato(Now), "Proyectos", "Proyecto: " & txtProyecto.text & " dado de baja en el sistema.")
        'CargarGrid()
      Else
        'Negativo
        'Cancelamos la acción a realizar
        btnAceptar.Visible = False
        btnCancelar.Visible = False
        'btnLimpiar_Click()

      Endif

  End Select

  'btnLimpiar_Click()
  btnAceptar.visible = False
  btnCancelar.visible = False
  btnBorrar.Enabled = False
  btnDuplicar.Enabled = False
  picDuplicado.Visible = False
  'Reiniciamos la variable global de la acción realizada
  sAccion = Null

End

Public Sub btnBorrar_Click()
  'Pulsamos el boton de borrar y marcamos la variable local para borrar

  sAccion = "del"
  btnAceptar.visible = True
  btnCancelar.Visible = True

End

Public Function ContieneDuplicado() As Boolean

  Dim resultado As Boolean = False

  If InStr(txtDescripcion.Text, "[Duplicado]" > 0) > 0 Then

    Message.Error("Los datos contienen la palabra [Duplicado]")
    resultado = True

  End If

  Return resultado

End

Public Sub btnSalir2_Click()

  Me.Close()
  MenuPrincipal.Show()


End

Public Sub ListViewClientes()

  rstResultado = cClientes.ListViewClientes(sFiltroCli, sBajaCli)
  rstResultado.MoveFirst
  lsvClientes.Clear
  Do While rstResultado.Available
    ' Clientes que están de Baja con el clientes Activo
    If rstResultado!ES_BAJA = "+" Then
      lsvClientes.Add(rstResultado!ID_CLIENTE, " - " & rstResultado!COD_CLIENTE, gConst.picBaja)
      ' El resto se consideran activos
    Else
      lsvClientes.Add(rstResultado!ID_CLIENTE, " - " & rstResultado!COD_CLIENTE, gConst.picActivo)
    Endif

    rstResultado.MoveNext
  Loop

End


Public Sub lblActivos_MouseDown()



End

Public Sub swbEstado_Click()

  If swbEstado.value = "T"
    sBajaCli = "-"
  Else
    sBajaCli = "%"
  Endif

  ListViewClientes()


End

Public Sub txtFiltroCli_KeyRelease()
  ' Recogemos en la variable el contenido del Texto de Búsqueda

  sFiltroCli = txtFiltroCli.Text
  ListViewClientes()

End

Public Sub lsvClientes_Click()

  'Guardamos el id de proyecto en la estructura
  gEstructuras.setIdCliente(lsvClientes.key)
  '
  sIdCliente = gEstructuras.getIdCliente()
  'Recargamos el gridView
  CargarGrid()

  btnLimpiar.Enabled = True

End

Public Sub CargarGrid()

  'cargamos en el resultset los proyectos
  rstResultado = cProyectos.GetProjects(sFiltroPro, sIdCliente, sEstadoBaja, sEstadoCerrado)
  ' obtenemos los registro para pintar el grid
  grvProyectos = cProyectos.GetGrid(grvProyectos, rstResultado)
  'Método para traer los items seleccionados en el GridView
  GetRows()

End

Public Sub GetRows()

  Dim resultado As String

  resultado = CStr(rstResultado.Count)
  lblRegistros.Text = "Registros: " & resultado

End

Public Sub CargarEstadosProyectos()

  cmbEstadoPro.Tag = New Integer[]
  cmbEstadoPro.Clear
  cmbEstadoPro.Add("Todos")
  cmbEstadoPro.Tag.Add(0)
  cmbEstadoPro.Add("Activos")
  cmbEstadoPro.Tag.Add(1)
  cmbEstadoPro.Add("Cerrados")
  cmbEstadoPro.Tag.Add(2)
  cmbEstadoPro.Add("Baja")
  cmbEstadoPro.Tag.Add(3)

End




' Public Sub FiltroProyectos()
'
'   rstResultado = cProyectos.FiltrarProyectos(sFiltroPro, sBajaPro, sCerradoPro)
'   rstResultado.MoveFirst
'   lsvProyectos.Clear
'   Do While rstResultado.Available
'     ' Proyectos cerrados con clientes Activos
'     If rstResultado!P_CERRADO = "+" And rstResultado!C_BAJA = "-" Then
'       lsvProyectos.Add(rstResultado!ID_PROYECTO, " - " & rstResultado!COD_PROYECTO, gConst.picCerrado)
'       ' Proyectos que están de Baja con el clientes Activo
'     Else If rstResultado!P_BAJA = "+" And rstResultado!C_BAJA = "-" Then
'       lsvProyectos.Add(rstResultado!ID_PROYECTO, " - " & rstResultado!COD_PROYECTO, gConst.picBaja)
'       ' Clientes de Baja
'     Else If rstResultado!C_BAJA = "+" Then
'       lsvProyectos.Add(rstResultado!ID_PROYECTO, " - " & rstResultado!COD_PROYECTO, gConst.picWarn)
'       ' El resto se consideran activos
'     Else
'       lsvProyectos.Add(rstResultado!ID_PROYECTO, " - " & rstResultado!COD_PROYECTO, gConst.picActivo)
'     Endif
'
'     rstResultado.MoveNext
'   Loop
'
' End
